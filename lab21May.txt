# SQL Query Optimization
# 1. Orders Query: Retrieve orders with many items and calculate the total price.

SELECT Orders.OrderID, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS TotalPrice
FROM Orders
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
WHERE OrderDetails.Quantity > 10
GROUP BY Orders.OrderID;

--------------------------------------------

CREATE INDEX idx_quantity 
    ON OrderDetails (OrderID, Quantity);
CREATE INDEX idx_unitPrice 
    ON OrderDetails (OrderID, UnitPrice);

SELECT Orders.OrderID, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS TotalPrice

FROM Orders

INNER JOIN OrderDetails 
    ON Orders.OrderID = OrderDetails.OrderID

WHERE OrderDetails.Quantity > 10

GROUP BY Orders.OrderID;


###############################################


#2. Customer Query: Find all customers from London and sort by CustomerName.

SELECT CustomerName 
    FROM Customers WHERE City = 'London' 
    ORDER BY CustomerName;

--------------------------------------------

CREATE INDEX idx_customers_name ON Customers(CustomerID, CustomerName);
CREATE INDEX idx_customers_city ON Customers(CustomerID, City);

SELECT CustomerName 
    FROM Customers 
    WHERE City = 'London' 
        ORDER BY CustomerName asc limit 100

###--------------------------------------------
###############################################
###--------------------------------------------
2. NoSQL Query Implementation

#1.User Posts Query: Retrieve the most popular active posts and display their title and like count.
db.posts
  .find({ status: "active" }, { title: 1, likes: 1 })
  .sort({ likes: -1 });

--------------------------------------------
db.collection.createIndex( { title: 1, likes: 1 } );

db.posts
  .find( { status: "active" },{ title: 1, likes: 1 } )
  .sort({ likes: -1 })
  .limit(100);

###############################################

#2. User Data Aggregation: Summarize the number of active users by location.
db.users.aggregate([
  { $match: { status: "active" } },
  { $group: { _id: "$location", totalUsers: { $sum: 1 } } },
]);

--------------------------------------------
db.collection.createIndex( { status: 1, location: 1 } )

db.users.aggregate([
  { $match: { status: "active" } },
  { $group: { _id: "$location", totalUsers: { $sum: 1 } } },
]);

###--------------------------------------------
###############################################
###--------------------------------------------